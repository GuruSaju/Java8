Def: A sequence of elements supporting sequential and parallel aggregate operations.

* Sequence of elements - provides sequence of elements on demand and does not store the element

* Source - Streams take Collections, Arrays, I/O resources as input source. 

* Aggregate operations - filter, map, limit, reduce, find, match etc

* Pipelining - stream.filter.forEach. (pipeline of operations)

* Automatic Operations (internal iterator) 

 In a nutshell, collections are about data and streams are about computations.

Consider a movie stored on a DVD. This is a collection (perhaps of bytes or perhaps of frames—we don’t care which here) 
because it contains the whole data structure. Now consider watching the same video when it is being streamed over the internet. 
It is now a stream (of bytes or frames). The streaming video player needs to have downloaded only a few frames in advance 
of where the user is watching, so you can start displaying values from the beginning of the stream before most of the values 
in the stream have even been computed (consider streaming a live football game).

In the coarsest terms, the difference between collections and streams has to do with when things are computed. A collection 
is an in-memory data structure, which holds all the values that the data structure currently has—every element in the collection 
has to be computed before it can be added to the collection. In contrast, a stream is a conceptually fixed data structure in 
which elements are computed on demand.


Stream operations that can be connected are called intermediate operations. They can be connected together because their return 
type is a Stream. Operations that close a stream pipeline are called terminal operations. They produce a result from a pipeline 
such as a List, an Integer, or even void (any non-Stream type).

You might be wondering why the distinction is important. Well, intermediate operations do not perform any processing until a terminal 
operation is invoked on the stream pipeline; they are “lazy.” This is because intermediate operations can usually be “merged” and 
processed into a single pass by the terminal operation.


Filtering. There are several operations that can be used to filter elements from a stream: 

filter(Predicate): Takes a predicate (java.util.function.Predicate) as an argument and returns 
                   a stream including all elements that match the given predicate
distinct: Returns a stream with unique elements (according to the implementation of equals for a stream element)
limit(n): Returns a stream that is no longer than the given size n
skip(n): Returns a stream with the first n number of elements discarded 

 anyMatch, allMatch, and noneMatch operations to help you do this. They all take a predicate as an argument and return a 
 boolean as the result (they are, therefore, terminal operations). For example, you can use allMatch to check that 
 all elements in a stream of transactions have a value higher than 100, as shown below

boolean expensive =transactions.stream().allMatch(t -> t.getValue() > 100);

Mapping. Streams support the method map, which takes a function (java.util.function.Function) as an argument to project the 
elements of a stream into another form. The function is applied to each element, “mapping” it into a new element.
